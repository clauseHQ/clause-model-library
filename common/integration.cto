/**
 * (c) Copyright 2018 Clause Inc., all rights reserved.
 */
namespace io.clause.common.integration

/**
 * A connection describes a transformation of an obligation (as emitted by a Smart Clause) into 
 * a transaction that can perform a real-world side effect such as making a payment or sending an email 
 * notification.
 */
asset Connection identified by id {
  o String id

  /* Fully qualified type name of the outbound type from the transformation
   * i.e. the physical type of the transaction */
  o String target

  /* Fully qualified type name of the inbound type from the transformation
   * i.e. the logical type of the transaction */
  o String source optional

  /* A stringified JSONata query. 
   * The transformation will only be applied if the query evaluates to true. 
   * e.g. `response.value > 100` */
  o String query optional

  /* A stringified JSONata transform. 
   * The transform will have access to:
   * - The `response` transaction and `obligation` event from the clause execution
   * - The `targetConfig` and `sourceConfig` (if it exists) */
  o String transform

  /* A reference to the credentials config object for the recipient of the performance.
   * For example, this could represent the supplier's Xero account or Slack credentials */ 
  --> Secret promiseeSecret optional

  /* A reference to the credentials config object for the sender of the performance.
   * The promisor is the party fulfilling the obligation.
   * For some connections, such as a payment, the source and destination accounts are both required.
   * This property captures the source account. */ 
  --> Secret promisorSecret optional
}

/* Identifier for the scope (owner) of secret in the vault */
abstract concept SecretScope { }

concept OrganizationSecretScope {
  o String organizationId
}

concept OrganizationMemberSecretScope {
  o String userId
}

concept GuestUserSecretScope {
  o String userId
  o String sessionId
}

/* An Secret captures the credentials that are required to automate an obligation. 
 * Secrets are stored in the Vault */
abstract asset Secret identified by id {
  o String id
  o String name
  o String description
  o Boolean active

  /* This key identifies the scope of this secret.
   * A scope can be a Clause organization or a guest user for example */
  o SecretScope scope
  
  --> CatalogApp app optional
}

asset GenericOAuthSecret extends Secret {
  o String accountId
  o String accessToken
  o String refreshToken
  o String disconnectUrl optional
  o DateTime expiresAt optional
}

asset GenericTokenSecret extends Secret {
  o String token
}

asset HTTPConfig extends Secret {
  o String url
}

asset CatalogApp identified by id {
  o String id
  o String name
  o String description
  o Boolean active
  o Boolean deprecated
  o String logoUrl optional
  o String serviceUrl optional
  o String docsUrl optional
  o String[] validConfigurations // Which types can implement this catalog app?
}
